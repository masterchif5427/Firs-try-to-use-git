//Arvore Binaria

#include <stdio.h>
#include <stdlib.h>
using namespace std;

struct noDaArvore{
    int valor;
    struct noDaArvore* esquerda;
    struct noDaArvore* direita;    
};

typedef struct noDaArvore no;

no* inserirNo(int valor,no* esq, no* dir);

void imprimirPreOrdem(no* n);
void imprimirEmOrdem(no* n);
void imprimirPosOrdem(no* n);

main(){
    no *n = inserirNo(30, inserirNo(1, inserirNo(2, inserirNo(7, NULL,NULL), NULL), inserirNo(3, inserirNo(9, NULL,NULL),inserirNo(12, NULL, NULL))), inserirNo(15, inserirNo(4, NULL, NULL), inserirNo(6, NULL, inserirNo(17, NULL, NULL))));
    printf("Pre-Ordem");
    imprimirPreOrdem(n);
    printf("\nEm-Ordem");
    imprimirEmOrdem(n);
    printf("\nPos-Ordem");
    imprimirPosOrdem(n);}

no* inserirNo(int valor, no* esq, no* dir){
    no* n = (no*) malloc(sizeof(no));
    if(n==NULL){
        exit(1);
    }else{
        n->valor = valor;
        n->esquerda = esq;
        n->direita = dir;
    }
    return n;    
}

void imprimirPreOrdem(no* n){
    if (n != NULL){
        printf("%i ", n->valor);
        imprimirPreOrdem(n->esquerda);
        imprimirPreOrdem(n->direita);
    }
}

void imprimirEmOrdem(no* n){
    if (n != NULL){
       
        imprimirEmOrdem(n->esquerda);
        printf("%i ", n->valor);        
        imprimirEmOrdem(n->direita);
    }
}
void imprimirPosOrdem(no* n){
    if (n != NULL){
       
        imprimirPosOrdem(n->esquerda);
        imprimirPosOrdem(n->direita);
        printf("%i ", n->valor);
    }
}
